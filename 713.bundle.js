(()=>{"use strict";const e=(e,t)=>{const[a,s,i]=e.split("."),[n,r]=t.split(":");return new Date(`${i}-${s}-${a}T${n}:${r}:00`)};self.onmessage=t=>{const{action:a,data:s}=t.data;let i;switch(a){case"sortMeetingsByStartTime":i=s.sort(((t,a)=>e(t.date,t.startTime).getTime()-e(a.date,a.startTime).getTime()));break;case"findOverlappingMeetings":{const{meetings:t,numsOfLicence:a}=s,n=(t=>t.flatMap((t=>[{time:e(t.date,t.startTime).getTime(),type:"start",meeting:t},{time:e(t.date,t.endTime).getTime(),type:"end",meeting:t}])).sort(((e,t)=>e.time-t.time||("start"===e.type?-1:1))))(t);let r=0;const m=new Set,o=new Set;n.forEach((e=>{"start"===e.type?(m.add(e.meeting),r++,r>a&&m.forEach((e=>o.add(e)))):(m.delete(e.meeting),r--,r>=a&&m.forEach((e=>o.add(e))))})),i=Array.from(o);break}default:return void console.error(`Unknown meeting action: ${a}`)}i&&self.postMessage({action:a,data:i})}})();