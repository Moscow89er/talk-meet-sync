(()=>{"use strict";const e=(e,t)=>{const[a,i,s]=e.split("."),[n,r]=t.split(":");return new Date(`${s}-${i}-${a}T${n}:${r}:00`)};self.onmessage=t=>{const{action:a,data:i}=t.data;let s;switch(a){case"sortMeetingsByStartTime":s=i.sort(((t,a)=>e(t.date,t.startTime).getTime()-e(a.date,a.startTime).getTime()));break;case"findOverlappingMeetings":const{meetings:t,numsOfLicence:n}=i,r=(t=>t.flatMap((t=>[{time:e(t.date,t.startTime).getTime(),type:"start",meeting:t},{time:e(t.date,t.endTime).getTime(),type:"end",meeting:t}])).sort(((e,t)=>e.time-t.time||("start"===e.type?-1:1))))(t);let m=0,o=new Set,d=new Set;r.forEach((e=>{"start"===e.type?(o.add(e.meeting),m++,m>n&&o.forEach((e=>d.add(e)))):(o.delete(e.meeting),m--,m>=n&&o.forEach((e=>d.add(e))))})),s=Array.from(d);break;default:return void console.error(`Unknown meeting action: ${a}`)}s&&self.postMessage({action:a,data:s})}})();