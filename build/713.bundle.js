(()=>{"use strict";const e=(e,t)=>{const[n,a,s]=e.split("."),[i,r]=t.split(":");return new Date(`${s}-${a}-${n}T${i}:${r}:00`)};self.onmessage=t=>{const{action:n,data:a}=t.data;switch(n){case"sortAndIdentifyOverlaps":{const{meetings:t,numsOfLicence:s}=a,i=(t=>t.sort(((t,n)=>e(t.date,t.startTime).getTime()-e(n.date,n.startTime).getTime())))(t),r=(t=>{const n=Date.now();return t.flatMap((t=>{const a=e(t.date,t.startTime).getTime(),s=e(t.date,t.endTime).getTime();return s<n?[]:[{time:a,type:"start",meeting:t},{time:s,type:"end",meeting:t}]})).sort(((e,t)=>e.time-t.time||("start"===e.type?-1:1)))})(i);let o=0;const d=new Set,m=new Set;r.forEach((e=>{"start"===e.type?(d.add(e.meeting),o++,o>s&&d.forEach((e=>m.add(e)))):(d.delete(e.meeting),o--,o>=s&&d.forEach((e=>m.add(e))))})),self.postMessage({action:n,data:{sortedMeetings:i,overlappingMeetings:Array.from(m)}});break}default:return void console.error(`Unknown meeting action: ${n}`)}}})();