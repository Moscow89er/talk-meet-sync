(()=>{"use strict";const e=(e,t)=>{const[a,n,s]=e.split("."),[i,r]=t.split(":");return new Date(`${s}-${n}-${a}T${i}:${r}:00`)};self.onmessage=t=>{const{action:a,data:n}=t.data;let s;switch(a){case"sortMeetingsByStartTime":s=n.sort(((t,a)=>e(t.date,t.startTime).getTime()-e(a.date,a.startTime).getTime()));break;case"findOverlappingMeetings":{const{meetings:t,numsOfLicence:a}=n,i=(t=>{const a=(new Date).getTime();return t.flatMap((t=>{const n=e(t.date,t.startTime).getTime(),s=e(t.date,t.endTime).getTime();return s<a?[]:[{time:n,type:"start",meeting:t},{time:s,type:"end",meeting:t}]})).sort(((e,t)=>e.time-t.time||("start"===e.type?-1:1)))})(t);let r=0;const o=new Set,m=new Set;i.forEach((e=>{"start"===e.type?(o.add(e.meeting),r++,r>a&&o.forEach((e=>m.add(e)))):(o.delete(e.meeting),r--,r>=a&&o.forEach((e=>m.add(e))))})),s=Array.from(m);break}default:return void console.error(`Unknown meeting action: ${a}`)}s&&self.postMessage({action:a,data:s})}})();